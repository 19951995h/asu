<%+header%>

<h2 name="content"><%:Attended Sysupgrade%></h2>
<div  class="container">
	<div style="display: none" id="update_info" class="alert-message warning">
	</div>
</div>
<fieldset class="cbi-section">
	<legend>System</legend>

	<table width="100%" cellspacing="10">
		<tr><td width="33%">distro</td><td><span id="distro"></span></td></tr>
		<tr><td width="33%">version</td><td><span id="version"></span></td></tr>
		<tr><td width="33%">board</td><td><span id="board"></span></td></tr>
		<tr><td width="33%">target</td><td><span id="target"></td></tr>
		<tr><td width="33%">subtarget</td><td><span id="subtarget"></td></tr>
		<tr><td width="33%">packages</td><td><span id="packages"></td></tr>
	</table>
</fieldset>
<input class="cbi-button" value="search for updates" onclick="update_request()" type="button" id="update_button">

<script type="text/javascript">

// the ip where the update-server (server.py) runs
update_server = "http://192.168.1.3:5000/";

// usub_rpc_session, no manual changes needed
ubus_rpc_session = "";
latest_release = "";

// do an xmlhttprequests
function request(data, url) {
	var xmlhttp = new XMLHttpRequest();
	xmlhttp.open("POST", url, false);
	xmlhttp.setRequestHeader("Content-type", "application/json");
	xmlhttp.send(data);
	return xmlhttp;
}

// requests to the update server
function server_request(data, path) {
	url = update_server + path
	request_dict = {}
	request_dict.distro = system.distribution;
	request_dict.target = system.target.split("\/")[0];
	request_dict.subtarget = system.target.split("\/")[1];
	request_dict.packages = packages;
	for (entry in data) {
		request_dict[entry] = data[entry]
	}

	return request(JSON.stringify(request_dict), url);
}

// is ubus_counter needed?
ubus_counter = 1

// requests ubus via rpcd
function ubus_request(command, argument, params) {
	// perform login if ubus_rpc_session is empty
	if (ubus_rpc_session == "" && command != "login") {
		ubus_rpc_session = "00000000000000000000000000000000";
		ubus_request("session", "login", '{ "username": "root", "password": "" }');
	}
	var data = '{ "jsonrpc": "2.0", "id": ' + ubus_counter + ', "method": "call", "params": [ "'+ ubus_rpc_session +'", "' + command + '", "' + argument + '", ' + params + ' ] }'
	ubus_counter++
	var url = "http://192.168.1.1/ubus/";
	response = request(data, url)
	if(response.status === 200) {
		response_text = JSON.parse(request(data, url).responseText)
			if(response_text.result) {
				response_text = response_text.result[1]
			} else {
				console.log(response_text)
			}
		if (argument == "login") {
			ubus_rpc_session = response_text.ubus_rpc_session
		} else {
			return response_text
		}
	} else {
		console.log(response.responseText)
	}
}

// gathers device information needed for update and device requests
function gather_facts() {
	packages = ubus_request("attended-sysupgrade", "get_installed_pkgs", '{  }').installed_pkgs;
	board = ubus_request("attended-sysupgrade", "get_board", '{  }').board;
	system = ubus_request("system", "board", '{  }').release;
	fill_table()
}

// shows notification if update is available
function update_info(info_output) {
	document.getElementById("update_info").style.display = "block";
	document.getElementById("update_info").innerHTML = info_output;
}

// asks server for news updates, actually only based on relesae not packages
function update_request() {
	console.log("update_request")
	request_dict = {}
	request_dict.version = system.version;
	response = server_request(request_dict, "update-request")

	if (response.status === 500) { 
		update_request_500()
	} else if (response.status === 503) {
		console.log("server overloaded")
		// handle overload
	} else if (response.status === 204) {
		// no updates
		update_request_204()
	} else if (response.status === 400) {
		// no updates
		response_content = JSON.parse(response.responseText)
		update_request_400(response_content)
	} else if (response.status === 200) {
		// new release/updates
		response_content = JSON.parse(response.responseText)
		update_request_200(response_content)
	}
}

function update_request_500() {
	update_info("internal server error - please try again later")
}

function update_request_400(response_content) {
	update_info(response_content.error)
}

function update_request_204() {
	update_info("no updates available")
}

function update_request_200(response_content) {
	info_output = ""
	if(response_content.version != undefined) {
		info_output += "new update available. from " + system.version + " to " + response_content.version
		latest_version = response_content.version;
	}
	if(response_content.packages != undefined) {
		info_output += "package updates available"
	}
	update_info(info_output)
	document.getElementById("update_button").value = "request image";
	document.getElementById("update_button").onclick = image_request;
}


// request the image, need merge with update_request
function image_request() {
	console.log("image_request")
	request_dict = {}
	request_dict.version = latest_version;
	request_dict.board = board;
	response = server_request(request_dict, "image-request")

	if (response.status === 500) { 
		image_request_500()
	} else if (response.status === 503) {
		update_info("please wait. server overloaded")
		// handle overload
	} else if (response.status === 201) {
		// in queue
		update_info("please wait. you are in queue position " + JSON.prase(response.responseText).queue)
	} else if (response.status === 206) {
		// building
		update_info("building image")
	} else if (response.status === 200) {
		// ready to download
		response_content = JSON.parse(response.responseText)
		update_info("image created")
		document.getElementById("update_button").value = "download and flash"
		document.getElementById("update_button").onclick = function() {download_image(response_content.url); }
	}
}

// fills table with device information, mainly for debbuging
function fill_table() {
	fill("distro", system.distribution)
	fill("version", system.version)
	fill("target", system.target.split("\/")[0])
	fill("subtarget", system.target.split("\/")[1])
	fill("board", board)
	fill("packages", Object.keys(packages))
}

function fill(div, input) {
    document.getElementById(div).innerHTML = JSON.stringify(input);
}

// uploads received blob data to the server using luci2-io-helper
// see https://github.com/jow-/luci-ng/tree/master/luci2-io-helper
function upload_image(blob) {
	var upload_request = new XMLHttpRequest();
	var form_data  = new FormData();

	form_data.append("sessionid", ubus_rpc_session)
	form_data.append("filename", "/tmp/sysupgrade.bin")
	form_data.append("filemode", 755)
	form_data.append("filedata", blob)
	
	upload_request.addEventListener('load', function(event) {
		document.getElementById("update_info").innerHTML = "successfully uploaded image to router. flashing"
		ubus_request("attended-sysupgrade", "sysupgrade", '{  }');

		// control checksum 
		// flash
  	});

  	upload_request.addEventListener('error', function(event) {
		document.getElementById("update_info").innerHTML = "uploading failed, please retry"
  	});

  	upload_request.open('POST', 'http://192.168.1.1/cgi-bin/luci-upload');
  	upload_request.send(form_data);
}

// download image from server once the url was received by image_request
function download_image(url) {
	console.log("download_image")
	document.getElementById("update_button").value = "flashing..."
	document.getElementById("update_button").disabled = true;
	var download_request = new XMLHttpRequest();
	download_request.open("GET", url);
	download_request.responseType = "arraybuffer";

	download_request.onload = function () {
		if (this.status === 200) {
			var blob = new Blob([download_request.response], {type: "text/plain; charset=x-user-defined"});
			upload_image(blob)
		}
	};
	document.getElementById("update_info").innerHTML = "downloading image"
	download_request.send();
}

document.onload = gather_facts()

</script>

<%+footer%>
